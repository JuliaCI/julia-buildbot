from buildbot.plugins import *
from buildbot.plugins import worker as bworker
from buildbot.process.results import SKIPPED
from datetime import timedelta
from github_listener import JuliaGithubListener
from buildbot.reporters.generators.build import BuildStartEndStatusGenerator, BuildStatusGenerator
import re

try:
    from buildbot_secret import *
except:
    IOError('Could not load buildbot_secret.py! Ensure you have a buildbot_secret.py in this directory, and that it defines GITHUB_SECRET!')

# This is the dictionary that the buildmaster pays attention to. We use the "c" alias because fingers.
c = BuildmasterConfig = {
    'protocols':{
        'pb': {
            'port': 9989
        }
    },
    'schedulers': [],
    'builders': [],
    'buildbotURL': 'https://' + FQDN + '/',
    'buildbotNetUsageData': 'full',
    'title': "Julia",
    'titleURL': "http://julialang.org",
    'db': {
        'db_url' : "postgresql://%s:%s@db/%s"%(db_user, db_password, db_user),
    },
    'services': [],
    'configurators': [
        util.JanitorConfigurator(
            # Keep only one quarters worth of logs
            logHorizon=timedelta(days=120),
            hour=9,
            dayOfWeek=0,
        )
    ],
    'www': {
        'port': 8010,

        # Setup GitHub change hook
        'change_hook_dialects': {
            'github': {
                'class': JuliaGithubListener,
                'secret': GITHUB_WEBHOOK_SECRET,
                'strict': True,
            },
        },

        # Setup GitHub OAuth2 integration to allow anyone in the JuliaLang org to use the buildbot
        'auth': util.GitHubAuth(GITHUB_OAUTH_CLIENT_ID, GITHUB_OAUTH_CLIENT_SECRET),
        'authz': util.Authz(
            allowRules=[
                util.StopBuildEndpointMatcher(role="JuliaLang"),
                util.ForceBuildEndpointMatcher(role="JuliaLang"),
                util.RebuildBuildEndpointMatcher(role="JuliaLang"),
            ],
            roleMatchers=[
                util.RolesFromGroups(groupPrefix="")
            ],
        ),

        'plugins': {
            # Setup waterfall view
            'waterfall_view': {},

            # Setup console view
            'console_view': {},

            # Setup Badges
            'badges': {},

            # Setup profiler
            'profiler': True,
        },
    }
}


# Returns true if this is a build started from the packager scheduler, not the
# force scheduler or jlbuild, or similar.
def is_nightly_build(props):
    return props.getProperty('scheduler').startswith("Julia CI")
def is_branch(props, branch):
    return props.getProperty('branch') == branch

# Convenience methods for figuring out what OS we're building for
def is_mac(props):
    return 'macos' in props.getProperty('buildername')
def is_windows(props):
    return 'win' in props.getProperty('buildername')
def is_freebsd(props):
    return 'freebsd' in props.getProperty('buildername')
def is_musl(props):
    return 'musl' in props.getProperty('buildername')
def is_linux(props):
    # Note that we return `true` for musl stuff here
    return not is_mac(props) and not is_windows(props) and not is_freebsd(props)

# We want to promote all nightly builds
def should_promote(props):
    return is_nightly_build(props) and is_protected_non_pr(props)
# But our "latest" promotion should only happen to `master`
def should_promote_latest(props):
    return is_nightly_build(props) and is_branch(props, "master")

# We use this condition to do things like trigger coverage builds and
# trigger deployment from a successful test build.
def is_assert_nightly(props):
    return should_promote(props) and "linux64" in props.getProperty('buildername') and props.getProperty('assert_build')

# Certain buildsteps we only run if the unwashed masses can't submit arbitrary code
def is_protected_non_pr(props):
    # Our other checks should already cover this case, but let's be extra paranoid
    if props.getProperty('event') == 'pullrequest':
        return False

    return is_protected_branch(props.getProperty('branch'))

def is_protected_branch(branch):
    return any([re.match(pat, branch) != None for pat in (
        # `master` is considered protected
        "^master$",
        # `release-X.Y` branches are considered protected
        "^release-\d+\.\d+$",
        # `vX.Y.Z` tags are considered protected
        "^v\d+\.\d+\.\d+(-rc\d+)?$",
    )])

# Returns a  dictionary mapping Properties that we can use in str.format()
def props_obj_to_dict(props_obj):
    props = props_obj.getProperties().asDict()
    return {k: props[k][0] for k in props}


# Load in our buildworker inventory
exec(open("inventory.py").read())

# Load in useful utilities for dealing with builders
exec(open("builder_utils.py").read())

# Load in packaging, separated testing and GC analysis (all the stuff we run per-commit)
exec(open("package.py").read())
exec(open("separated_testing.py").read())
exec(open("analyzegc.py").read())
exec(open("doctest.py").read())
exec(open("llvmpasses.py").read())
exec(open("whitespace.py").read())

# Cleaning
exec(open("cache_control.py").read())

# Load in code-executor
exec(open("run_code.py").read())

# Load in nightly tasks such as building with threading, GC debug runs, etc...
#exec(open("nightly_threading.py").read())
#exec(open("nightly_gc_debug.py").read())

# Run coverage after generating tarballs
exec(open("coverage.py").read())

# Enable auto-reloads from github
exec(open("auto_reload.py").read())


# Enable status reporting, but not for platforms which we know to be broken,
# and we don't have the bandwidth or cycles to fix right now
status_builders = [k for k in builder_mapping.keys()]
report_builders = [("package_" + k) for k in status_builders if not k in ("linuxarmv7l", "musl64")] + \
                  [("tester_"   + k) for k in status_builders if not k in ("linuxarmv7l", "linuxppc64le", "musl64")] + \
                  ["analyzegc_linux64", "doctest_linux64", "llvmpasses_linux64", "whitespace_linux32"]
status_generator = BuildStartEndStatusGenerator(
    builders=report_builders,
    start_formatter=reporters.MessageFormatterRenderable('Build started.'),
    end_formatter=reporters.MessageFormatterRenderable('Build finished.'),
)
package_report = reporters.GitHubStatusPush(
    token=GITHUB_STATUS_OAUTH_TOKEN,
    context=util.Interpolate("buildbot/%(prop:buildername)s"),
    generators=[status_generator],
)
c['services'].append(package_report)

# Add failed build reporting
exec(open("slack_failure.py").read())
slack_generator = BuildStatusGenerator(
    builders=report_builders,
    message_formatter=reporters.MessageFormatterFunction(slack_failed_build, 'json'),
)
failed_report = reporters.HttpStatusPush(
    serverUrl = "https://hooks.slack.com/services" + SLACK_FAILURE_REPORT_SLUG,
    generators = [slack_generator],
)
c['services'].append(failed_report)
