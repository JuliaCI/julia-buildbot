from buildbot.plugins import *

try:
    from buildbot_secret import *
except:
    IOError('Could not load buildbot_secret.py! Ensure you have a buildbot_secret.py in this directory, and that it defines GITHUB_SECRET!')



# This is the dictionary that the buildmaster pays attention to. We use a the "c" alias because fingers.
c = BuildmasterConfig = {
    'protocols':{
        'pb': {
            'port': 9989
        }
    },
    'schedulers': [],
    'builders': [],
    'status': [],
    'www': {},
    'buildbotURL': 'https://buildtest.e.ip.saba.us/',
    'buildbotNetUsageData': 'full',
    'title': "Julia",
    'titleURL': "http://julialang.org",
    'db': {
        'db_url' : "sqlite:///state.sqlite",
    },
}


# Returns true if this is a build started from a tarball/dmg/zip packaging scheduler
def is_nightly_build(step):
    return step.getProperty('scheduler') == "Julia packager"

def is_osx(step):
    return 'osx' in step.getProperty('buildername')

def is_windows(step):
    return 'win' in step.getProperty('buildername')

def is_linux(step):
    return not is_osx(step) and not is_windows(step)

# Returns true if this is a build running on a builder that we should upload
# artifacts on, e.g. windows, osx, or linux tarball builders.  This explicitly
# excludes our ubuntu and (newer) centos builders, as those are just there to
# build and test, without uploading
def should_upload(step):
    return step.getProperty('buildername').startswith('package_')

def should_upload_latest(step):
    return should_upload(step) and is_nightly_build(step)

# Returns true if we should run coverage on this build; that is, if it
# was a nightly (not forced) build and it was 64-bit linux tarball build
def should_run_coverage(step):
    buildername = step.getProperty('buildername')
    return is_nightly_build(step) and buildername == 'package_tarball64'

# Load in our buildworker inventory
execfile("inventory.py")

# Load in the stuff for making OSX bottles
execfile("bottling.py")

# Load in packaging for various platforms
execfile("package.py")
execfile("package_launchpad.py")

# Load in juno signing builder
execfile("sign_juno.py")

# Load in nightly tasks such as building Homebrew, building against LLVM SVN, etc...
execfile("nightly_llvmsvn.py")
execfile("nightly_homebrew.py")
execfile("nightly_srpm.py")
execfile("nightly_threading.py")
execfile("nightly_gc_debug.py")

# Load in cleaning builders
execfile("nuclear_arsenal.py")

# Run coverage after generating tarballs
execfile("coverage.py")

c['www'] = {
    'port': 8010,

    # Setup GitHub change hook
    'change_hook_dialects': {
        'github': {
            'secret': GITHUB_WEBHOOK_SECRET,
            'strict': True,
        },
    },

    # Setup GitHub OAuth2 integration
    'auth': util.GitHubAuth(GITHUB_OAUTH_CLIENT_ID, GITHUB_OAUTH_CLIENT_SECRET),
    'authz': util.Authz(
        allowRules=[
            util.AnyEndpointMatcher(role="JuliaLang")
        ],
        roleMatchers=[
            util.RolesFromGroups(groupPrefix="")
        ],
    ),

    'plugins': {
        # Setup waterfall view
        'waterfall_view': {},

        # Setup console view
        'console_view': {},
    }
}
